package com.wipro.Controller;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.wipro.entity.Staff;
import com.wipro.service.StaffService;

@WebMvcTest(StaffController.class)
public class StaffControllerTest {

    @InjectMocks
    private StaffController staffController;

    @Mock
    private StaffService staffService;

    private MockMvc mockMvc;
    private ObjectMapper objectMapper = new ObjectMapper();

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(staffController).build();
    }

    @Test
    void testGetAllStaff() throws Exception {
        Staff staff = new Staff();
        staff.setId(1L);
        staff.setName("John Doe");
        staff.setRole("Developer");

        when(staffService.getAllStaff()).thenReturn(List.of(staff));

        mockMvc.perform(get("/staff")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].name").value("John Doe"));
    }

    @Test
    void testCreateStaff() throws Exception {
        Staff staff = new Staff();
        staff.setId(1L);
        staff.setName("John Doe");
        staff.setRole("Developer");

        when(staffService.createOrUpdateStaff(any(Staff.class))).thenReturn(staff);

        mockMvc.perform(post("/staff")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(staff)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name").value("John Doe"));
    }

    @Test
    void testUpdateStaff() throws Exception {
        Staff staff = new Staff();
        staff.setId(1L);
        staff.setName("John Doe");
        staff.setRole("Developer");

        when(staffService.createOrUpdateStaff(any(Staff.class))).thenReturn(staff);

        mockMvc.perform(put("/staff/1")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(staff)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name").value("John Doe"));
    }

    @Test
    void testDeleteStaff() throws Exception {
        doNothing().when(staffService).deleteStaff(1L);

        mockMvc.perform(delete("/staff/1")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk());
    }
}
