package com.wipro.service;

import java.security.Key;
import java.security.SignatureException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

@Component
public class JwtService {

    public static final String SECRET = "5367566B59703373367639792F423F4528482B4D6251655468576D5A71347437";

    // Validate JWT token
    public void validateToken(final String token) {
        Jwts.parserBuilder()
            .setSigningKey(getSignKey())
            .build()
            .parseClaimsJws(token);
    }

    // Generate a JWT token
    public String generateToken(String userName) {
        return createToken(new HashMap<>(), userName);
    }

    // Extract username from JWT token
    public String extractUsername(String token) {
        return getClaims(token).getSubject();
    }

    // Get Claims from JWT token
    private Claims getClaims(String token) {
        try {
            return Jwts.parserBuilder()
                .setSigningKey(getSignKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
        } catch (SignatureException e) {
            throw new RuntimeException("Invalid JWT signature");
        }
    }

    // Create JWT token
    private String createToken(Map<String, Object> claims, String userName) {
        return Jwts.builder()
            .setClaims(claims)
            .setSubject(userName)
            .setIssuedAt(new Date())
            .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 30)) // 30 minutes expiration
            .signWith(getSignKey(), io.jsonwebtoken.SignatureAlgorithm.HS256) // Use io.jsonwebtoken.SignatureAlgorithm.HS256
            .compact();
    }

    // Generate signing key from secret
    private Key getSignKey() {
        byte[] keyBytes = Decoders.BASE64.decode(SECRET);
        return Keys.hmacShaKeyFor(keyBytes);
    }
}
